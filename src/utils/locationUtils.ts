// Utility per estrarre il nome della localit√† dall'indirizzo e aggiungere emoticon

const LOCATION_EMOJIS: Record<string, string> = {
  // Principali citt√† della Romagna
  'rimini': 'üèñÔ∏è',
  'riccione': 'üèñÔ∏è',
  'cattolica': 'üèñÔ∏è',
  'cesenatico': 'üèñÔ∏è',
  'milano marittima': 'üèñÔ∏è',
  'cervia': 'üèñÔ∏è',
  'ravenna': 'üèõÔ∏è',
  'forl√¨': 'üèõÔ∏è',
  'cesena': 'üèõÔ∏è',
  'faenza': 'üèõÔ∏è',
  'imola': 'üèõÔ∏è',
  'lugo': 'üèõÔ∏è',
  'fusignano': 'üèõÔ∏è',
  'bagnacavallo': 'üèõÔ∏è',
  'castel bolognese': 'üèõÔ∏è',
  'solarolo': 'üèõÔ∏è',
  'cotignola': 'üèõÔ∏è',
  'massa lombarda': 'üèõÔ∏è',
  'conselice': 'üèõÔ∏è',
  'alfonsine': 'üèõÔ∏è',
  'sant\'alberto': 'üèõÔ∏è',
  'russi': 'üèõÔ∏è',
  'porto corsini': '‚öì',
  'marina romea': 'üèñÔ∏è',
  'marina di ravenna': 'üèñÔ∏è',
  'lido adriano': 'üèñÔ∏è',
  'lido di classe': 'üèñÔ∏è',
  'lido di savio': 'üèñÔ∏è',
  'punta marina': 'üèñÔ∏è',
  'bellaria': 'üèñÔ∏è',
  'igea marina': 'üèñÔ∏è',
  'san mauro pascoli': 'üåø',
  'savignano sul rubicone': 'üåø',
  'gatteo': 'üåø',
  'bagno di romagna': 'üèîÔ∏è',
  'santa sofia': 'üèîÔ∏è',
  'civitella di romagna': 'üèîÔ∏è',
  'galeata': 'üèîÔ∏è',
  'premilcuore': 'üèîÔ∏è',
  'portico e san benedetto': 'üèîÔ∏è',
  'rocca san casciano': 'üèîÔ∏è',
  'dovadola': 'üèîÔ∏è',
  'modigliana': 'üèîÔ∏è',
  'tredozio': 'üèîÔ∏è',
  'castrocaro terme': 'üíé',
  'terra del sole': 'üíé',
  'meldola': 'üåø',
  'bertinoro': 'üç∑',
  'longiano': 'üè∞',
  'borghi': 'üè∞',
  'roncofreddo': 'üåø',
  'montiano': 'üåø',
  'sogliano al rubicone': 'üåø',
  'mercato saraceno': 'üåø',
  'sarsina': 'üèõÔ∏è',
  'verghereto': 'üèîÔ∏è',
  // Default per localit√† non specificate
  // Default per localit√† non specificate
  'default': 'üìç'
};


/**
 * Ottiene l'emoticon appropriata per una localit√†
 * @param locationName - Il nome della localit√†
 * @returns L'emoticon corrispondente
 */
export const getLocationEmoji = (locationName: string): string => {
  if (!locationName) return LOCATION_EMOJIS.default;
  
  const normalizedLocation = locationName.toLowerCase().trim();
  
  // Cerca una corrispondenza esatta
  if (LOCATION_EMOJIS[normalizedLocation]) {
    return LOCATION_EMOJIS[normalizedLocation];
  }
  
  // Cerca una corrispondenza parziale
  for (const [location, emoji] of Object.entries(LOCATION_EMOJIS)) {
    if (normalizedLocation.includes(location) || location.includes(normalizedLocation)) {
      return emoji;
    }
  }
  
  return LOCATION_EMOJIS.default;
};
